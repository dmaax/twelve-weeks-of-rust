export const indexHtml = "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Rust Learning Plan Dashboard</title>\n    <style>\n        :root {\n            /* Light theme colors */\n            --bg-primary: #f8fafc;\n            --bg-secondary: #ffffff;\n            --bg-tertiary: #f1f5f9;\n            --text-primary: #1e293b;\n            --text-secondary: #64748b;\n            --text-muted: #94a3b8;\n            --border-color: #e2e8f0;\n            --border-hover: #cbd5e1;\n            --shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);\n            --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);\n            \n            /* Orange theme colors */\n            --orange-50: #fff7ed;\n            --orange-100: #ffedd5;\n            --orange-200: #fed7aa;\n            --orange-300: #fdba74;\n            --orange-400: #fb923c;\n            --orange-500: #f97316;\n            --orange-600: #ea580c;\n            --orange-700: #c2410c;\n            --orange-800: #9a3412;\n            --orange-900: #7c2d12;\n            \n            /* Green colors for completed tasks */\n            --green-50: #f0fdf4;\n            --green-100: #dcfce7;\n            --green-200: #bbf7d0;\n            --green-500: #22c55e;\n            --green-600: #16a34a;\n            --green-800: #166534;\n            --green-900: #14532d;\n            \n            /* Blue colors for in-progress */\n            --blue-50: #eff6ff;\n            --blue-100: #dbeafe;\n            --blue-200: #bfdbfe;\n            --blue-500: #3b82f6;\n            --blue-600: #2563eb;\n            \n            /* Red colors for errors */\n            --red-50: #fef2f2;\n            --red-100: #fee2e2;\n            --red-500: #ef4444;\n            --red-600: #dc2626;\n            --red-800: #991b1b;\n            \n            /* Purple colors for phases */\n            --purple-50: #faf5ff;\n            --purple-100: #f3e8ff;\n            --purple-500: #8b5cf6;\n            --purple-600: #7c3aed;\n        }\n\n        [data-theme=\"dark\"] {\n            /* Dark theme colors */\n            --bg-primary: #0f172a;\n            --bg-secondary: #1e293b;\n            --bg-tertiary: #334155;\n            --text-primary: #f8fafc;\n            --text-secondary: #cbd5e1;\n            --text-muted: #64748b;\n            --border-color: #334155;\n            --border-hover: #475569;\n            --shadow: 0 4px 6px -1px rgb(0 0 0 / 0.3), 0 2px 4px -2px rgb(0 0 0 / 0.3);\n            --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.3), 0 4px 6px -4px rgb(0 0 0 / 0.3);\n            \n            /* Adjust colors for dark mode */\n            --green-50: #14532d;\n            --green-100: #166534;\n            --green-200: #16a34a;\n            --blue-50: #1e3a8a;\n            --blue-100: #1d4ed8;\n            --red-50: #991b1b;\n            --red-100: #dc2626;\n            --purple-50: #581c87;\n            --purple-100: #6b21a8;\n        }\n\n        * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n        }\n\n        body {\n            font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;\n            line-height: 1.6;\n            background-color: var(--bg-primary);\n            color: var(--text-primary);\n            transition: background-color 0.3s ease, color 0.3s ease;\n            min-height: 100vh;\n        }\n\n        .container {\n            max-width: 1200px;\n            margin: 0 auto;\n            padding: 2rem 1rem;\n        }\n\n        /* Header */\n        .header {\n            display: flex;\n            align-items: center;\n            justify-content: space-between;\n            margin-bottom: 2rem;\n            flex-wrap: wrap;\n            gap: 1rem;\n        }\n\n        .title {\n            font-size: clamp(2rem, 5vw, 3rem);\n            font-weight: 700;\n            background: linear-gradient(135deg, var(--orange-600), var(--orange-800));\n            -webkit-background-clip: text;\n            -webkit-text-fill-color: transparent;\n            background-clip: text;\n            display: flex;\n            align-items: center;\n            gap: 0.5rem;\n        }\n\n        .header-controls {\n            display: flex;\n            align-items: center;\n            gap: 1rem;\n        }\n\n        /* Control buttons */\n        .control-btn {\n            background: var(--bg-secondary);\n            border: 1px solid var(--border-color);\n            border-radius: 0.5rem;\n            padding: 0.5rem 1rem;\n            color: var(--text-primary);\n            cursor: pointer;\n            transition: all 0.3s ease;\n            font-size: 0.875rem;\n            display: flex;\n            align-items: center;\n            gap: 0.5rem;\n        }\n\n        .control-btn:hover {\n            background: var(--bg-tertiary);\n            border-color: var(--border-hover);\n            box-shadow: var(--shadow);\n        }\n\n        /* Theme Toggle */\n        .theme-toggle {\n            display: flex;\n            align-items: center;\n            gap: 0.5rem;\n            background: var(--bg-secondary);\n            border: 1px solid var(--border-color);\n            border-radius: 2rem;\n            padding: 0.5rem;\n            box-shadow: var(--shadow);\n            transition: all 0.3s ease;\n        }\n\n        .theme-toggle:hover {\n            box-shadow: var(--shadow-lg);\n        }\n\n        .theme-icon {\n            width: 1rem;\n            height: 1rem;\n            color: var(--text-secondary);\n        }\n\n        .toggle-switch {\n            position: relative;\n            width: 3rem;\n            height: 1.5rem;\n            background: var(--border-color);\n            border-radius: 1rem;\n            cursor: pointer;\n            transition: background-color 0.3s ease;\n        }\n\n        .toggle-switch.active {\n            background: var(--orange-600);\n        }\n\n        .toggle-slider {\n            position: absolute;\n            top: 2px;\n            left: 2px;\n            width: 1.25rem;\n            height: 1.25rem;\n            background: white;\n            border-radius: 50%;\n            transition: transform 0.3s ease;\n            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n        }\n\n        .toggle-switch.active .toggle-slider {\n            transform: translateX(1.5rem);\n        }\n\n        /* Stats Grid */\n        .stats-grid {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n            gap: 1rem;\n            margin-bottom: 2rem;\n        }\n\n        .stat-card {\n            background: var(--bg-secondary);\n            border: 1px solid var(--border-color);\n            border-radius: 0.75rem;\n            padding: 1.5rem;\n            text-align: center;\n            box-shadow: var(--shadow);\n            transition: all 0.3s ease;\n        }\n\n        .stat-card:hover {\n            box-shadow: var(--shadow-lg);\n            transform: translateY(-2px);\n        }\n\n        .stat-value {\n            font-size: 2rem;\n            font-weight: 700;\n            margin-bottom: 0.5rem;\n        }\n\n        .stat-label {\n            color: var(--text-secondary);\n            font-size: 0.875rem;\n            text-transform: uppercase;\n            letter-spacing: 0.5px;\n        }\n\n        .stat-completed { color: var(--green-600); }\n        .stat-total { color: var(--blue-600); }\n        .stat-remaining { color: var(--orange-600); }\n        .stat-phases { color: var(--purple-600); }\n\n        /* Cards */\n        .card {\n            background: var(--bg-secondary);\n            border: 1px solid var(--border-color);\n            border-radius: 0.75rem;\n            box-shadow: var(--shadow);\n            transition: all 0.3s ease;\n            overflow: hidden;\n        }\n\n        .card:hover {\n            box-shadow: var(--shadow-lg);\n            border-color: var(--border-hover);\n        }\n\n        .card-header {\n            padding: 1.5rem;\n            border-bottom: 1px solid var(--border-color);\n        }\n\n        .card-content {\n            padding: 1.5rem;\n        }\n\n        .card-title {\n            font-size: 1.25rem;\n            font-weight: 600;\n            color: var(--text-primary);\n            margin-bottom: 0.5rem;\n        }\n\n        /* Progress Section */\n        .progress-card {\n            margin-bottom: 2rem;\n            border-color: var(--orange-200);\n        }\n\n        [data-theme=\"dark\"] .progress-card {\n            border-color: var(--orange-800);\n        }\n\n        .progress-text {\n            text-align: center;\n            font-size: 1.125rem;\n            font-weight: 500;\n            margin-bottom: 1rem;\n            color: var(--text-primary);\n        }\n\n        .progress-bar-container {\n            width: 100%;\n            height: 1rem;\n            background: var(--bg-tertiary);\n            border-radius: 0.5rem;\n            overflow: hidden;\n            margin-bottom: 1rem;\n            position: relative;\n        }\n\n        .progress-bar {\n            height: 100%;\n            background: linear-gradient(90deg, var(--green-500), var(--green-600));\n            border-radius: 0.5rem;\n            transition: width 0.8s ease;\n            position: relative;\n        }\n\n        .progress-bar::after {\n            content: '';\n            position: absolute;\n            top: 0;\n            left: 0;\n            right: 0;\n            bottom: 0;\n            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.3), transparent);\n            animation: shimmer 2s infinite;\n        }\n\n        @keyframes shimmer {\n            0% { transform: translateX(-100%); }\n            100% { transform: translateX(100%); }\n        }\n\n        .progress-percentage {\n            text-align: center;\n            font-size: 2rem;\n            font-weight: 700;\n            color: var(--orange-600);\n        }\n\n        /* Filter Controls */\n        .filter-controls {\n            display: flex;\n            gap: 0.5rem;\n            margin-bottom: 1.5rem;\n            flex-wrap: wrap;\n        }\n\n        .filter-btn {\n            padding: 0.5rem 1rem;\n            border: 1px solid var(--border-color);\n            background: var(--bg-secondary);\n            color: var(--text-secondary);\n            border-radius: 2rem;\n            cursor: pointer;\n            transition: all 0.3s ease;\n            font-size: 0.875rem;\n        }\n\n        .filter-btn:hover {\n            border-color: var(--orange-300);\n            color: var(--text-primary);\n        }\n\n        .filter-btn.active {\n            background: var(--orange-600);\n            color: white;\n            border-color: var(--orange-600);\n        }\n\n        /* Phase Cards */\n        .phases-container {\n            display: flex;\n            flex-direction: column;\n            gap: 1.5rem;\n        }\n\n        .phase-card {\n            border-color: var(--border-color);\n            transition: all 0.3s ease;\n        }\n\n        .phase-card.collapsed .card-content {\n            display: none;\n        }\n\n        .phase-header {\n            display: flex;\n            align-items: center;\n            justify-content: space-between;\n            cursor: pointer;\n        }\n\n        .phase-title {\n            display: flex;\n            align-items: center;\n            gap: 0.75rem;\n            font-size: 1.25rem;\n            font-weight: 600;\n            color: var(--text-primary);\n        }\n\n        .phase-icon {\n            color: var(--orange-600);\n            font-size: 1.25rem;\n        }\n\n        .phase-progress {\n            display: flex;\n            align-items: center;\n            gap: 0.5rem;\n            font-size: 0.875rem;\n            color: var(--text-secondary);\n        }\n\n        .phase-progress-bar {\n            width: 60px;\n            height: 4px;\n            background: var(--bg-tertiary);\n            border-radius: 2px;\n            overflow: hidden;\n        }\n\n        .phase-progress-fill {\n            height: 100%;\n            background: var(--green-500);\n            transition: width 0.5s ease;\n        }\n\n        .collapse-btn {\n            background: none;\n            border: none;\n            color: var(--text-secondary);\n            cursor: pointer;\n            padding: 0.25rem;\n            border-radius: 0.25rem;\n            transition: all 0.3s ease;\n        }\n\n        .collapse-btn:hover {\n            background: var(--bg-tertiary);\n            color: var(--text-primary);\n        }\n\n        /* Tasks */\n        .tasks-list {\n            display: flex;\n            flex-direction: column;\n            gap: 0.75rem;\n        }\n\n        .task-item {\n            display: flex;\n            align-items: center;\n            gap: 0.75rem;\n            padding: 0.75rem;\n            border: 1px solid var(--border-color);\n            border-radius: 0.5rem;\n            cursor: pointer;\n            transition: all 0.3s ease;\n            background: var(--bg-primary);\n            position: relative;\n            overflow: hidden;\n        }\n\n        .task-item::before {\n            content: '';\n            position: absolute;\n            left: 0;\n            top: 0;\n            bottom: 0;\n            width: 3px;\n            background: var(--orange-600);\n            transform: scaleY(0);\n            transition: transform 0.3s ease;\n        }\n\n        .task-item:hover {\n            background: var(--bg-tertiary);\n            border-color: var(--border-hover);\n            transform: translateX(4px);\n        }\n\n        .task-item:hover::before {\n            transform: scaleY(1);\n        }\n\n        .task-item.completed {\n            background: var(--green-50);\n            border-color: var(--green-200);\n        }\n\n        .task-item.completed::before {\n            background: var(--green-500);\n            transform: scaleY(1);\n        }\n\n        [data-theme=\"dark\"] .task-item.completed {\n            background: var(--green-50);\n            border-color: var(--green-100);\n        }\n\n        .task-checkbox {\n            width: 1.25rem;\n            height: 1.25rem;\n            flex-shrink: 0;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            font-size: 1rem;\n        }\n\n        .task-text {\n            flex: 1;\n            transition: all 0.3s ease;\n            color: var(--text-primary);\n        }\n\n        .task-item.completed .task-text {\n            text-decoration: line-through;\n            color: var(--text-muted);\n        }\n\n        .task-date {\n            font-size: 0.75rem;\n            color: var(--text-muted);\n            margin-left: auto;\n        }\n\n        /* Loading State */\n        .loading {\n            display: flex;\n            flex-direction: column;\n            gap: 1rem;\n        }\n\n        .skeleton {\n            background: linear-gradient(90deg, var(--bg-tertiary) 25%, var(--border-color) 50%, var(--bg-tertiary) 75%);\n            background-size: 200% 100%;\n            animation: loading 1.5s infinite;\n            border-radius: 0.5rem;\n        }\n\n        .skeleton-title {\n            height: 3rem;\n            margin-bottom: 2rem;\n        }\n\n        .skeleton-stats {\n            height: 6rem;\n            margin-bottom: 2rem;\n        }\n\n        .skeleton-progress {\n            height: 8rem;\n            margin-bottom: 2rem;\n        }\n\n        .skeleton-phase {\n            height: 12rem;\n        }\n\n        @keyframes loading {\n            0% { background-position: 200% 0; }\n            100% { background-position: -200% 0; }\n        }\n\n        /* Error State */\n        .error-card {\n            border-color: var(--red-100);\n            background: var(--red-50);\n        }\n\n        .error-icon {\n            font-size: 4rem;\n            margin-bottom: 1rem;\n        }\n\n        .error-title {\n            color: var(--red-800);\n            font-size: 1.5rem;\n            font-weight: 700;\n            margin-bottom: 1rem;\n        }\n\n        .error-message {\n            color: var(--red-600);\n            margin-bottom: 1rem;\n        }\n\n        .error-code {\n            background: var(--red-100);\n            padding: 0.25rem 0.5rem;\n            border-radius: 0.25rem;\n            font-family: monospace;\n        }\n\n        /* Success toast */\n        .toast {\n            position: fixed;\n            top: 2rem;\n            right: 2rem;\n            background: var(--green-600);\n            color: white;\n            padding: 1rem 1.5rem;\n            border-radius: 0.5rem;\n            box-shadow: var(--shadow-lg);\n            transform: translateX(100%);\n            transition: transform 0.3s ease;\n            z-index: 1000;\n        }\n\n        .toast.show {\n            transform: translateX(0);\n        }\n\n        /* Motivational quotes */\n        .quote-card {\n            background: linear-gradient(135deg, var(--purple-50), var(--blue-50));\n            border: 1px solid var(--purple-100);\n            margin-bottom: 2rem;\n        }\n\n        .quote-text {\n            font-style: italic;\n            font-size: 1.125rem;\n            color: var(--text-primary);\n            margin-bottom: 0.5rem;\n        }\n\n        .quote-author {\n            color: var(--text-secondary);\n            font-size: 0.875rem;\n        }\n\n        /* Footer */\n        .footer {\n            margin-top: 3rem;\n            text-align: center;\n            color: var(--text-muted);\n            font-size: 0.875rem;\n        }\n\n        /* Responsive Design */\n        @media (max-width: 768px) {\n            .container {\n                padding: 1rem;\n            }\n            \n            .header {\n                flex-direction: column;\n                align-items: stretch;\n                text-align: center;\n            }\n            \n            .header-controls {\n                justify-content: center;\n            }\n            \n            .stats-grid {\n                grid-template-columns: repeat(2, 1fr);\n            }\n            \n            .filter-controls {\n                justify-content: center;\n            }\n        }\n\n        @media (max-width: 480px) {\n            .stats-grid {\n                grid-template-columns: 1fr;\n            }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <!-- Header -->\n        <div class=\"header\">\n            <h1 class=\"title\">\n                <span>🦀</span>\n                <span>Rust Learning Dashboard</span>\n            </h1>\n            <div class=\"header-controls\">\n                <button class=\"control-btn\" id=\"resetBtn\">\n                    <span>🔄</span>\n                    <span>Reset Progress</span>\n                </button>\n                <button class=\"control-btn\" id=\"exportBtn\">\n                    <span>📊</span>\n                    <span>Export Progress</span>\n                </button>\n                <div class=\"theme-toggle\">\n                    <svg class=\"theme-icon\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z\"></path>\n                    </svg>\n                    <div class=\"toggle-switch\" id=\"themeToggle\">\n                        <div class=\"toggle-slider\"></div>\n                    </div>\n                    <svg class=\"theme-icon\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z\"></path>\n                    </svg>\n                </div>\n            </div>\n        </div>\n\n        <!-- Main Content -->\n        <div id=\"app-container\">\n            <!-- Loading State -->\n            <div id=\"loading-state\" class=\"loading\">\n                <div class=\"skeleton skeleton-title\"></div>\n                <div class=\"skeleton skeleton-stats\"></div>\n                <div class=\"skeleton skeleton-progress\"></div>\n                <div class=\"skeleton skeleton-phase\"></div>\n                <div class=\"skeleton skeleton-phase\"></div>\n                <div class=\"skeleton skeleton-phase\"></div>\n            </div>\n\n            <!-- Error State -->\n            <div id=\"error-state\" class=\"card error-card\" style=\"display: none;\">\n                <div class=\"card-content\" style=\"text-align: center;\">\n                    <div class=\"error-icon\">⚠️</div>\n                    <h2 class=\"error-title\">Failed to Load Plan</h2>\n                    <p class=\"error-message\">\n                        Could not fetch or parse the <code class=\"error-code\">./docs/PLAN.md</code> file.\n                    </p>\n                    <p style=\"color: var(--text-secondary); font-size: 0.875rem;\">\n                        <strong>Common Fix:</strong> This page must be served by a web server, not opened directly from your file system.\n                    </p>\n                </div>\n            </div>\n\n            <!-- Main Dashboard -->\n            <div id=\"dashboard\" style=\"display: none;\">\n                <!-- Stats Grid -->\n                <div class=\"stats-grid\">\n                    <div class=\"stat-card\">\n                        <div class=\"stat-value stat-completed\" id=\"stat-completed\">0</div>\n                        <div class=\"stat-label\">Completed</div>\n                    </div>\n                    <div class=\"stat-card\">\n                        <div class=\"stat-value stat-total\" id=\"stat-total\">0</div>\n                        <div class=\"stat-label\">Total Tasks</div>\n                    </div>\n                    <div class=\"stat-card\">\n                        <div class=\"stat-value stat-remaining\" id=\"stat-remaining\">0</div>\n                        <div class=\"stat-label\">Remaining</div>\n                    </div>\n                    <div class=\"stat-card\">\n                        <div class=\"stat-value stat-phases\" id=\"stat-phases\">0</div>\n                        <div class=\"stat-label\">Phases</div>\n                    </div>\n                </div>\n\n                <!-- Motivational Quote -->\n                <div class=\"card quote-card\">\n                    <div class=\"card-content\">\n                        <div class=\"quote-text\" id=\"motivational-quote\">\n                            \"The most dangerous phrase in the language is, 'We've always done it this way.'\"\n                        </div>\n                        <div class=\"quote-author\">— Grace Hopper</div>\n                    </div>\n                </div>\n\n                <!-- Progress Summary -->\n                <div class=\"card progress-card\">\n                    <div class=\"card-header\">\n                        <div class=\"progress-text\" id=\"progress-text\">\n                            Overall Progress: 0 / 0 tasks completed\n                        </div>\n                    </div>\n                    <div class=\"card-content\">\n                        <div class=\"progress-bar-container\">\n                            <div class=\"progress-bar\" id=\"progress-bar\" style=\"width: 0%;\"></div>\n                        </div>\n                        <div class=\"progress-percentage\" id=\"progress-percentage\">0%</div>\n                    </div>\n                </div>\n\n                <!-- Filter Controls -->\n                <div class=\"filter-controls\">\n                    <button class=\"filter-btn active\" data-filter=\"all\">All Tasks</button>\n                    <button class=\"filter-btn\" data-filter=\"completed\">Completed</button>\n                    <button class=\"filter-btn\" data-filter=\"pending\">Pending</button>\n                    <button class=\"filter-btn\" data-filter=\"expand-all\">Expand All</button>\n                    <button class=\"filter-btn\" data-filter=\"collapse-all\">Collapse All</button>\n                </div>\n\n                <!-- Phases Container -->\n                <div class=\"phases-container\" id=\"phases-container\"></div>\n            </div>\n        </div>\n\n        <!-- Footer -->\n        <div class=\"footer\">\n            <p>Keep learning and building amazing things with Rust! 🚀</p>\n            <p style=\"margin-top: 0.5rem; font-size: 0.75rem;\">\n                Progress is automatically saved to your browser\n            </p>\n        </div>\n    </div>\n\n    <!-- Toast notification -->\n    <div id=\"toast\" class=\"toast\"></div>\n\n    <script>\n        // Theme Management\n        const themeToggle = document.getElementById('themeToggle');\n        const body = document.body;\n        \n        // Check for saved theme preference or default to light mode\n        const savedTheme = localStorage.getItem('theme') || 'light';\n        setTheme(savedTheme);\n        \n        themeToggle.addEventListener('click', () => {\n            const currentTheme = body.getAttribute('data-theme') || 'light';\n            const newTheme = currentTheme === 'light' ? 'dark' : 'light';\n            setTheme(newTheme);\n            localStorage.setItem('theme', newTheme);\n        });\n        \n        function setTheme(theme) {\n            body.setAttribute('data-theme', theme);\n            themeToggle.classList.toggle('active', theme === 'dark');\n        }\n\n        // Motivational quotes\n        const motivationalQuotes = [\n            { text: \"The most dangerous phrase in the language is, 'We've always done it this way.'\", author: \"Grace Hopper\" },\n            { text: \"Programs must be written for people to read, and only incidentally for machines to execute.\", author: \"Harold Abelson\" },\n            { text: \"The best way to learn is by doing.\", author: \"Richard Branson\" },\n            { text: \"Code is like humor. When you have to explain it, it's bad.\", author: \"Cory House\" },\n            { text: \"First, solve the problem. Then, write the code.\", author: \"John Johnson\" },\n            { text: \"Learning never exhausts the mind.\", author: \"Leonardo da Vinci\" },\n            { text: \"The expert in anything was once a beginner.\", author: \"Helen Hayes\" }\n        ];\n\n        function updateMotivationalQuote() {\n            const quote = motivationalQuotes[Math.floor(Math.random() * motivationalQuotes.length)];\n            document.getElementById('motivational-quote').textContent = quote.text;\n            document.querySelector('.quote-author').textContent = `— ${quote.author}`;\n        }\n\n        // Toast notifications\n        function showToast(message, duration = 3000) {\n            const toast = document.getElementById('toast');\n            toast.textContent = message;\n            toast.classList.add('show');\n            \n            setTimeout(() => {\n                toast.classList.remove('show');\n            }, duration);\n        }\n\n        // Dashboard Logic\n        document.addEventListener('DOMContentLoaded', () => {\n            const MARKDOWN_FILE_PATH = '/plan';\n            const STORAGE_KEY = 'rust-learning-progress';\n            \n            // Mock data for demonstration\n            const mockMarkdownData = `\n## 📋 PHASE 1: Rust Fundamentals\n- [x] Install Rust and set up development environment\n- [x] Learn about ownership and borrowing\n- [ ] Understand structs and enums\n- [ ] Practice with pattern matching\n- [ ] Complete basic exercises\n- [ ] Read \"The Rust Programming Language\" chapters 1-8\n\n## 📋 PHASE 2: Advanced Concepts\n- [x] Learn about lifetimes\n- [ ] Understand traits and generics\n- [ ] Work with collections (Vec, HashMap)\n- [ ] Error handling with Result and Option\n- [ ] Concurrency basics\n- [ ] Practice with closures and iterators\n\n## 📋 PHASE 3: Real-world Projects\n- [ ] Build a CLI application\n- [ ] Create a web server with Actix\n- [ ] Work with databases (SQLx)\n- [ ] Deploy a Rust application\n- [ ] Contribute to open source\n- [ ] Build a complete full-stack project\n\n## 📋 PHASE 4: Mastery & Specialization\n- [ ] Advanced memory management\n- [ ] Unsafe Rust and FFI\n- [ ] Performance optimization\n- [ ] Contribute to Rust ecosystem\n- [ ] Mentor other developers\n            `.trim();\n\n            let phases = [];\n            let totalTasks = 0;\n            let completedTasks = 0;\n            let currentFilter = 'all';\n\n            // Load saved progress\n            function loadProgress() {\n                const saved = localStorage.getItem(STORAGE_KEY);\n                return saved ? JSON.parse(saved) : null;\n            }\n\n            // Save progress\n            function saveProgress() {\n                const progressData = {\n                    phases: phases,\n                    timestamp: new Date().toISOString()\n                };\n                localStorage.setItem(STORAGE_KEY, JSON.stringify(progressData));\n            }\n\n            async function buildDashboard() {\n                try {\n                    showLoading();\n                    \n                    // Simulate network delay\n                    await new Promise(resolve => setTimeout(resolve, 1000));\n                    \n                    // Try to fetch real markdown file, fallback to mock data\n                    let markdownText;\n                    try {\n                        const response = await fetch(MARKDOWN_FILE_PATH);\n                        if (!response.ok) throw new Error(`HTTP ${response.status}`);\n                        markdownText = await response.text();\n                    } catch (fetchError) {\n                        console.warn('Could not fetch markdown file, using mock data:', fetchError);\n                        markdownText = mockMarkdownData;\n                    }\n                    \n                    phases = parseMarkdown(markdownText);\n                    \n                    // Load saved progress\n                    const savedProgress = loadProgress();\n                    if (savedProgress && savedProgress.phases) {\n                        // Merge saved progress with current structure\n                        mergeProgress(phases, savedProgress.phases);\n                    }\n                    \n                    renderDashboard(phases);\n                    setupEventListeners();\n                    updateMotivationalQuote();\n                    showDashboard();\n                    \n                    showToast('Dashboard loaded successfully! 🎉');\n                } catch (error) {\n                    console.error('Error building dashboard:', error);\n                    showError(error);\n                }\n            }\n\n            function parseMarkdown(text) {\n                const lines = text.trim().split('\\n');\n                const phases = [];\n                let currentPhase = null;\n\n                const phaseRegex = /^## 📋 (PHASE \\d+:.*)/;\n                const taskRegex = /-\\s*\\[( |x)\\]\\s*(.*)/;\n\n                for (const line of lines) {\n                    const phaseMatch = line.match(phaseRegex);\n                    const taskMatch = line.match(taskRegex);\n\n                    if (phaseMatch) {\n                        currentPhase = { \n                            title: phaseMatch[1], \n                            tasks: [],\n                            collapsed: false,\n                            id: `phase-${phases.length}`\n                        };\n                        phases.push(currentPhase);\n                    } else if (taskMatch && currentPhase) {\n                        currentPhase.tasks.push({\n                            text: taskMatch[2].trim(),\n                            completed: taskMatch[1] === 'x',\n                            completedDate: null,\n                            id: `task-${currentPhase.tasks.length}`\n                        });\n                    }\n                }\n                return phases;\n            }\n\n            function mergeProgress(currentPhases, savedPhases) {\n                savedPhases.forEach((savedPhase, phaseIndex) => {\n                    if (currentPhases[phaseIndex]) {\n                        currentPhases[phaseIndex].collapsed = savedPhase.collapsed || false;\n                        \n                        savedPhase.tasks.forEach((savedTask, taskIndex) => {\n                            if (currentPhases[phaseIndex].tasks[taskIndex]) {\n                                currentPhases[phaseIndex].tasks[taskIndex].completed = savedTask.completed;\n                                currentPhases[phaseIndex].tasks[taskIndex].completedDate = savedTask.completedDate;\n                            }\n                        });\n                    }\n                });\n            }\n\n            function renderDashboard(phases) {\n                const phasesContainer = document.getElementById('phases-container');\n                phasesContainer.innerHTML = '';\n\n                totalTasks = 0;\n                completedTasks = 0;\n\n                phases.forEach((phase, phaseIndex) => {\n                    if (phase.tasks.length === 0) return;\n\n                    const phaseDiv = document.createElement('div');\n                    phaseDiv.className = `card phase-card ${phase.collapsed ? 'collapsed' : ''}`;\n                    phaseDiv.setAttribute('data-phase', phaseIndex);\n\n                    // Calculate phase progress\n                    const phaseTotalTasks = phase.tasks.length;\n                    const phaseCompletedTasks = phase.tasks.filter(task => task.completed).length;\n                    const phaseProgress = phaseTotalTasks > 0 ? (phaseCompletedTasks / phaseTotalTasks) * 100 : 0;\n\n                    const phaseHeader = document.createElement('div');\n                    phaseHeader.className = 'card-header';\n                    \n                    const phaseHeaderContent = document.createElement('div');\n                    phaseHeaderContent.className = 'phase-header';\n                    \n                    const phaseTitle = document.createElement('h2');\n                    phaseTitle.className = 'phase-title';\n                    phaseTitle.innerHTML = `<span class=\"phase-icon\">📋</span><span>${phase.title}</span>`;\n                    \n                    const phaseInfo = document.createElement('div');\n                  phaseInfo.style.display = 'flex';\n                    phaseInfo.style.alignItems = 'center';\n                    phaseInfo.style.gap = '1rem';\n                    \n                    const phaseProgressDiv = document.createElement('div');\n                    phaseProgressDiv.className = 'phase-progress';\n                    phaseProgressDiv.innerHTML = `\n                        <span>${phaseCompletedTasks}/${phaseTotalTasks}</span>\n                        <div class=\"phase-progress-bar\">\n                            <div class=\"phase-progress-fill\" style=\"width: ${phaseProgress}%\"></div>\n                        </div>\n                    `;\n                    \n                    const collapseBtn = document.createElement('button');\n                    collapseBtn.className = 'collapse-btn';\n                    collapseBtn.innerHTML = phase.collapsed ? '▶️' : '▼️';\n                    collapseBtn.onclick = (e) => {\n                        e.stopPropagation();\n                        togglePhase(phaseIndex);\n                    };\n                    \n                    phaseInfo.appendChild(phaseProgressDiv);\n                    phaseInfo.appendChild(collapseBtn);\n                    \n                    phaseHeaderContent.appendChild(phaseTitle);\n                    phaseHeaderContent.appendChild(phaseInfo);\n                    phaseHeader.appendChild(phaseHeaderContent);\n                    phaseDiv.appendChild(phaseHeader);\n\n                    const phaseContent = document.createElement('div');\n                    phaseContent.className = 'card-content';\n                    \n                    const tasksList = document.createElement('div');\n                    tasksList.className = 'tasks-list';\n\n                    phase.tasks.forEach((task, taskIndex) => {\n                        totalTasks++;\n                        if (task.completed) completedTasks++;\n\n                        // Apply filter\n                        let shouldShow = true;\n                        if (currentFilter === 'completed' && !task.completed) shouldShow = false;\n                        if (currentFilter === 'pending' && task.completed) shouldShow = false;\n\n                        if (!shouldShow) return;\n\n                        const taskItem = document.createElement('div');\n                        taskItem.className = `task-item ${task.completed ? 'completed' : ''}`;\n                        taskItem.onclick = () => toggleTask(phaseIndex, taskIndex);\n\n                        const checkbox = document.createElement('div');\n                        checkbox.className = 'task-checkbox';\n                        checkbox.textContent = task.completed ? '✅' : '⭕';\n\n                        const taskText = document.createElement('div');\n                        taskText.className = 'task-text';\n                        taskText.textContent = task.text;\n\n                        const taskDate = document.createElement('div');\n                        taskDate.className = 'task-date';\n                        if (task.completed && task.completedDate) {\n                            taskDate.textContent = new Date(task.completedDate).toLocaleDateString();\n                        }\n\n                        taskItem.appendChild(checkbox);\n                        taskItem.appendChild(taskText);\n                        if (taskDate.textContent) taskItem.appendChild(taskDate);\n                        tasksList.appendChild(taskItem);\n                    });\n\n                    phaseContent.appendChild(tasksList);\n                    phaseDiv.appendChild(phaseContent);\n                    phasesContainer.appendChild(phaseDiv);\n                });\n\n                updateProgress();\n                updateStats();\n            }\n\n            function toggleTask(phaseIndex, taskIndex) {\n                const task = phases[phaseIndex].tasks[taskIndex];\n                task.completed = !task.completed;\n                \n                if (task.completed) {\n                    task.completedDate = new Date().toISOString();\n                    showToast('Great job! Task completed! 🎉');\n                } else {\n                    task.completedDate = null;\n                    showToast('Task marked as pending');\n                }\n                \n                saveProgress();\n                renderDashboard(phases);\n            }\n\n            function togglePhase(phaseIndex) {\n                phases[phaseIndex].collapsed = !phases[phaseIndex].collapsed;\n                saveProgress();\n                renderDashboard(phases);\n            }\n\n           function updateProgress() {\n                const percentage = totalTasks > 0 ? (completedTasks / totalTasks) * 100 : 0;\n                \n                document.getElementById('progress-bar').style.width = `${percentage}%`;\n                document.getElementById('progress-percentage').textContent = `${Math.round(percentage)}%`;\n                document.getElementById('progress-text').textContent = \n                    `Overall Progress: ${completedTasks} / ${totalTasks} tasks completed`;\n            }\n\n            function updateStats() {\n                document.getElementById('stat-completed').textContent = completedTasks;\n                document.getElementById('stat-total').textContent = totalTasks;\n                document.getElementById('stat-remaining').textContent = totalTasks - completedTasks;\n                document.getElementById('stat-phases').textContent = phases.length;\n            }\n\n            function setupEventListeners() {\n                // Filter buttons\n                document.querySelectorAll('.filter-btn').forEach(btn => {\n                    btn.addEventListener('click', (e) => {\n                        const filter = e.target.getAttribute('data-filter');\n                        \n                        if (filter === 'expand-all') {\n                            phases.forEach(phase => phase.collapsed = false);\n                        } else if (filter === 'collapse-all') {\n                            phases.forEach(phase => phase.collapsed = true);\n                        } else {\n                            currentFilter = filter;\n                            document.querySelectorAll('.filter-btn').forEach(b => b.classList.remove('active'));\n                            e.target.classList.add('active');\n                        }\n                        \n                        saveProgress();\n                        renderDashboard(phases);\n                    });\n                });\n\n                // Reset button\n                document.getElementById('resetBtn').addEventListener('click', () => {\n                    if (confirm('Are you sure you want to reset all progress? This cannot be undone.')) {\n                        localStorage.removeItem(STORAGE_KEY);\n                        phases.forEach(phase => {\n                            phase.tasks.forEach(task => {\n                                task.completed = false;\n                                task.completedDate = null;\n                            });\n                            phase.collapsed = false;\n                        });\n                        renderDashboard(phases);\n                        showToast('Progress reset successfully!');\n                    }\n                });\n\n                // Export button\n                document.getElementById('exportBtn').addEventListener('click', () => {\n                    const progressData = {\n                        exportDate: new Date().toISOString(),\n                        totalTasks,\n                        completedTasks,\n                        completionPercentage: Math.round((completedTasks / totalTasks) * 100),\n                        phases: phases.map(phase => ({\n                            title: phase.title,\n                            totalTasks: phase.tasks.length,\n                            completedTasks: phase.tasks.filter(t => t.completed).length,\n                            tasks: phase.tasks.map(task => ({\n                                text: task.text,\n                                completed: task.completed,\n                                completedDate: task.completedDate\n                            }))\n                        }))\n                    };\n                    \n                    const dataStr = JSON.stringify(progressData, null, 2);\n                    const dataBlob = new Blob([dataStr], {type: 'application/json'});\n                    const url = URL.createObjectURL(dataBlob);\n                    const link = document.createElement('a');\n                    link.href = url;\n                    link.download = `rust-learning-progress-${new Date().toISOString().split('T')[0]}.json`;\n                    link.click();\n                    URL.revokeObjectURL(url);\n                    \n                    showToast('Progress exported successfully! 📊');\n                });\n            }\n\n            function showLoading() {\n                document.getElementById('loading-state').style.display = 'block';\n                document.getElementById('error-state').style.display = 'none';\n                document.getElementById('dashboard').style.display = 'none';\n            }\n\n            function showError(error) {\n                document.getElementById('loading-state').style.display = 'none';\n                document.getElementById('error-state').style.display = 'block';\n                document.getElementById('dashboard').style.display = 'none';\n            }\n\n            function showDashboard() {\n                document.getElementById('loading-state').style.display = 'none';\n                document.getElementById('error-state').style.display = 'none';\n                document.getElementById('dashboard').style.display = 'block';\n            }\n\n            // Initialize the dashboard\n            buildDashboard();\n\n            // Update motivational quote every 30 seconds\n            setInterval(updateMotivationalQuote, 30000);\n        });\n    </script>\n</body>\n</html>\n";
export const planMd = "# 🦀 Complete Plan: Learn Rust and Create a Minecraft Bot\n\n**Total Duration:** 12 weeks (3 months)  \n**Final Goal:** A functional bot that connects to and interacts with a Minecraft server\n\n---\n\n## 📋 PHASE 1: Rust Fundamentals (Weeks 1-3)\n\n### Week 1: Basic Syntax and Ownership\n**Goal:** Master Rust's fundamental concepts\n\n#### Day 1-2: Setup and First Steps\n- [ ] Install Rust via rustup\n- [ ] Set up VS Code with rust-analyzer\n- [ ] Read Rust Book Chapters 1-3\n- [ ] **Project:** Hello World and variables\n\n#### Day 3-4: Ownership and Borrowing\n- [ ] Rust Book Chapters 4-5\n- [ ] Do Rustlings exercises (ownership section)\n- [ ] **Project:** Basic CLI Calculator\n- [ ] Understand: ownership, borrowing, references\n\n#### Day 5-7: Structs and Error Handling\n- [ ] Rust Book Chapters 6-9\n- [ ] **Project:** Guessing game with error handling\n- [ ] Master: `Result<T,E>`, `Option<T>`, `match` expressions\n\n### Week 2: Intermediate Concepts\n**Goal:** Traits, generics, and collections\n\n#### Day 8-10: Traits and Generics\n- [ ] Rust Book Chapters 10-11\n- [ ] **Project:** Geometric shapes system (traits)\n- [ ] Implement custom traits\n\n#### Day 11-14: Collections and Modules\n- [ ] Rust Book Chapters 8, 7\n- [ ] **Project:** To-do list with file I/O (Vec, HashMap)\n- [ ] Organize code into modules\n\n### Week 3: Testing and Cargo\n**Goal:** Code quality and project management\n\n#### Day 15-17: Testing\n- [ ] Rust Book Chapter 11\n- [ ] Add tests to previous projects\n- [ ] Unit tests and integration tests\n\n#### Day 18-21: Capstone Project\n- [ ] **Project:** RPG Simulator\n  - [ ] Structs for Player, Monster, Item\n  - [ ] Battle system\n  - [ ] Inventory system\n  - [ ] Save/load to file\n- [ ] Use all concepts learned so far\n\n---\n\n## 📋 PHASE 2: Basic Networking (Weeks 4-5)\n\n### Week 4: TCP Fundamentals\n**Goal:** Master TCP and network communication\n\n#### Day 22-24: Echo Server\n- [ ] **Project:** TCP Echo Server\n  - [ ] Create a server that accepts connections\n  - [ ] Implement echo (returns the received message)\n  - [ ] Handle multiple connections with threads\n- [ ] Concepts: `TcpListener`, `TcpStream`, `Read`/`Write` traits\n\n#### Day 25-28: Chat Server\n- [ ] **Project:** Multi-client Chat Room\n  - [ ] Central server that distributes messages\n  - [ ] CLI client for testing\n  - [ ] Broadcast to all connected clients\n- [ ] Concepts: `Arc<Mutex<>>`, channels, thread communication\n\n### Week 5: HTTP and Protocols\n**Goal:** Understand application-level protocols\n\n#### Day 29-31: HTTP Client\n- [ ] **Project:** Simple HTTP Client\n  - [ ] Make GET requests\n  - [ ] Parse HTTP responses\n  - [ ] Handle different status codes\n- [ ] Concepts: String parsing, headers, protocols\n\n#### Day 32-35: Port Scanner\n- [ ] **Project:** Port Scanner\n  - [ ] Scan a range of ports\n  - [ ] Timeout handling\n  - [ ] Concurrent scanning\n- [ ] Concepts: Connection timeouts, error handling\n\n---\n\n## 📋 PHASE 3: Binary Protocols (Weeks 6-7)\n\n### Week 6: DNS Client (CRITICAL)\n**Goal:** Master parsing of binary protocols\n\n#### Day 36-38: DNS Structure\n- [ ] Study the DNS protocol (RFC 1035)\n- [ ] Understand binary packet structure\n- [ ] **Base Project:** DNS packet structures\n\n#### Day 39-42: DNS Implementation\n- [ ] **Project:** Complete DNS Client\n  - [ ] Create DNS query packets\n  - [ ] Parse DNS responses\n  - [ ] Handle different record types (A, AAAA, MX)\n  - [ ] Big-endian byte order\n- [ ] **FUNDAMENTAL:** This project teaches everything needed for Minecraft!\n\n### Week 7: Proxy and Binary Protocols\n**Goal:** Advanced manipulation of binary data\n\n#### Day 43-45: TCP Proxy\n- [ ] **Project:** TCP Proxy Server\n  - [ ] Forward connections between client/server\n  - [ ] Bidirectional data flow\n  - [ ] Connection management\n\n#### Day 46-49: Binary Data Manipulation\n- [ ] **Project:** Custom Binary Protocol\n  - [ ] Design a simple binary protocol\n  - [ ] Implement encoder/decoder\n  - [ ] Variable-length fields\n- [ ] Direct preparation for the Minecraft protocol\n\n---\n\n## 📋 PHASE 4: Async Programming (Weeks 8-9)\n\n### Week 8: Tokio Basics\n**Goal:** Master asynchronous programming\n\n#### Day 50-52: Async Fundamentals\n- [ ] Read the complete Tokio Tutorial\n- [ ] Async Book (first chapters)\n- [ ] **Project:** Async Echo Server\n- [ ] Concepts: `async`/`await`, `Future` trait\n\n#### Day 53-56: Advanced Async\n- [ ] **Project:** Concurrent HTTP Client\n  - [ ] Make multiple requests simultaneously\n  - [ ] Use `join!` and `select!` macros\n  - [ ] Async error handling\n- [ ] Concepts: concurrent vs. parallel, async patterns\n\n### Week 9: Async Networking\n**Goal:** Advanced asynchronous networking\n\n#### Day 57-59: Async TCP Server\n- [ ] **Project:** Async Chat Server\n  - [ ] Rewrite the chat server using Tokio\n  - [ ] Handle hundreds of connections\n  - [ ] Broadcast efficiency\n\n#### Day 60-63: Real-time Communication\n- [ ] **Project:** Simple Game Server\n  - [ ] Real-time position updates\n  - [ ] Multiple clients\n  - [ ] Low-latency communication\n- [ ] Preparation for Minecraft networking\n\n---\n\n## 📋 PHASE 5: Minecraft Protocol Study (Week 10)\n\n### Week 10: Protocol Deep Dive\n**Goal:** Master the Minecraft protocol\n\n#### Day 64-66: Protocol Documentation\n- [ ] Study wiki.vg/Protocol completely\n- [ ] Understand connection states\n- [ ] Analyze packet structures\n- [ ] **Project:** VarInt Implementation\n  - [ ] Implement VarInt/VarLong encoding\n  - [ ] Implement decoding\n  - [ ] Unit tests for edge cases\n\n#### Day 67-70: Packet Framework\n- [ ] **Project:** Minecraft Packet Framework\n  - [ ] Base packet trait\n  - [ ] Serialization/deserialization\n  - [ ] Packet ID management\n  - [ ] Buffer management with the `bytes` crate\n- [ ] Foundation for the bot\n\n---\n\n## 📋 PHASE 6: Bot Implementation (Weeks 11-12)\n\n### Week 11: Connection and Login\n**Goal:** Bot that connects to the server\n\n#### Day 71-73: Handshake Implementation\n- [ ] **Milestone:** Handshake Packet\n  - [ ] Create handshake packet\n  - [ ] Send to server\n  - [ ] Handle server response\n- [ ] Connection state management\n\n#### Day 74-77: Login Flow\n- [ ] **Milestone:** Complete Login\n  - [ ] Login Start packet\n  - [ ] Handle encryption (offline mode first)\n  - [ ] Join Game packet processing\n  - [ ] Enter Play state\n\n### Week 12: Bot Functionality\n**Goal:** Functional and interactive bot\n\n#### Day 78-80: Basic Play State\n- [ ] **Milestone:** Bot in the World\n  - [ ] Process Player Position packets\n  - [ ] Send Keep Alive responses\n  - [ ] Handle Chat packets\n  - [ ] Basic world interaction\n\n#### Day 81-84: Bot Features\n- [ ] **Final Project:** Interactive Bot\n  - [ ] Respond to chat commands\n  - [ ] Basic movement\n  - [ ] Simple AI behaviors\n  - [ ] Basic inventory management\n\n---\n\n## 🎯 Milestones and Deliverables\n\n### Checkpoint 1 (End of Week 3)\n- [ ] **Deliverable:** RPG Simulator with all features\n- [ ] **Skills:** Ownership, traits, error handling, file I/O\n\n### Checkpoint 2 (End of Week 5)\n- [ ] **Deliverable:** Chat server with multiple clients\n- [ ] **Skills:** TCP networking, concurrency, threads\n\n### Checkpoint 3 (End of Week 7)\n- [ ] **Deliverable:** DNS client that resolves any domain\n- [ ] **Skills:** Binary protocols, big-endian, packet parsing\n\n### Checkpoint 4 (End of Week 9)\n- [ ] **Deliverable:** Async game server\n- [ ] **Skills:** Async programming, Tokio, high-performance networking\n\n### Checkpoint 5 (End of Week 10)\n- [ ] **Deliverable:** VarInt encoder/decoder + packet framework\n- [ ] **Skills:** Minecraft protocol, serialization\n\n### Final Deliverable (End of Week 12)\n- [ ] **🏆 FINAL GOAL:** Fully functional Minecraft Bot\n- [ ] **Features:** Connect, login, chat, movement, basic AI\n\n---\n\n## 📚 Resources by Phase\n\n### Books and Tutorials\n- **The Rust Programming Language** (entire plan)\n- **Tokio Tutorial** (Weeks 8-9)\n- **wiki.vg/Protocol** (Weeks 10-12)\n- **Rustlings Exercises** (Weeks 1-3)\n\n### Essential Crates\n```toml\n[dependencies]\ntokio = { version = \"1\", features = [\"full\"] }\nbytes = \"1.0\"\nserde = { version = \"1.0\", features = [\"derive\"] }\nuuid = \"1.0\"\naes = \"0.8\"      # For encryption\nrsa = \"0.9\"      # For encryption  \nanyhow = \"1.0\"   # Error handling\ntracing = \"0.1\"  # Logging\n```\n\n---\n\n## 🚨 Critical Points of Attention\n\n### ⚠️ **Week 6 (DNS Client)** - MOST IMPORTANT\nThis project teaches you EVERYTHING you need for Minecraft:\n- Binary protocol parsing\n- Big-endian byte order\n- Variable-length fields\n- Network packet handling\n\n### ⚠️ **Week 10 (VarInt)** - FUNDAMENTAL\nVarInt is used in EVERY Minecraft packet. If you don't master this, nothing will work.\n\n### ⚠️ **Tests are Mandatory**\nEvery project must have tests. Networking bugs are hard to debug.\n\n---\n\n## 🎉 Celebrations and Motivation\n\n- **Week 3:** 🎉 You've mastered basic Rust!\n- **Week 5:** 🎉 You're a network programmer!\n- **Week 7:** 🎉 You've mastered binary protocols!\n- **Week 9:** 🎉 You're an async expert!\n- **Week 12:** 🏆 **YOUR MINECRAFT BOT IS ALIVE!**\n\n---\n\n## 📈 Tracking Progress\n\nUse this plan as a checklist. Mark each item as you complete it.\n**Rule:** Do not skip steps. Each project builds skills for the next.\n\n**Suggested daily time:** 2-3 hours\n**Suggested weekend time:** 4-6 hours per day\n\n**Good luck! 🦀🎮**\n";